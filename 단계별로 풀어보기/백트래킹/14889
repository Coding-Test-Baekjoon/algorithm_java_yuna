import java.util.Scanner;

public class Main {
    static int n;
    static int[][] s;
    static boolean[] visited;
    static int min = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        s = new int[n][n];
        visited = new boolean[n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                s[i][j] = sc.nextInt();
            }
        }

        dfs(0, 0);

        System.out.println(min);
    }

    // 조합 구하기
    static void dfs(int depth, int idx) { // depth : 현재까지 뽑은 사람 수, idx : 탐색을 시작할 인덱스
        if (depth == n / 2) {
            calculate();
            return;
        }

        // 조합 생성
        for (int i = idx; i < n; i++) {
            visited[i] = true;
            dfs(depth + 1, i + 1);
            visited[i] = false;
        }
    }

    static void calculate() {
        int start = 0;
        int link = 0;

        // 각 팀 능력치 차이 계산
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (visited[i] && visited[j]) {  // 둘 다 스타트팀
                    start += s[i][j] + s[j][i];
                } else if (!visited[i] && !visited[j]) {  // 둘 다 링크팀
                    link += s[i][j] + s[j][i];
                }
            }
        }
        
        // 차이 최솟값 갱신
        min = Math.min(min, Math.abs(start - link));
    }
}
