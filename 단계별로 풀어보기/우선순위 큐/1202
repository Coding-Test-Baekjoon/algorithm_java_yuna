import java.io.*;
import java.util.*;
public class Main {

    static class Jewel implements Comparable<Jewel> {
        int weight;
        int price;

        // 보석 정보
        public Jewel(int weight, int price) {
            this.weight = weight;
            this.price = price;
        }

        @Override
        // 무게 기준 오름차순 정렬
        public int compareTo(Jewel other) {  
            return this.weight - other.weight;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer tokenizer = new StringTokenizer(reader.readLine());

        int n = Integer.parseInt(tokenizer.nextToken()); // 보석 수
        int k = Integer.parseInt(tokenizer.nextToken()); // 가방 수

        Jewel[] jewels = new Jewel[n];
        for (int i = 0; i < n; i++) {
            tokenizer = new StringTokenizer(reader.readLine());
            int weight = Integer.parseInt(tokenizer.nextToken());
            int price = Integer.parseInt(tokenizer.nextToken());
            jewels[i] = new Jewel(weight, price);
        }
        
        int[] bagCapacity = new int[k];  // 가방 용량
        for (int i = 0; i < k; i++) {
            bagCapacity[i] = Integer.parseInt(reader.readLine());
        }

        Arrays.sort(jewels); // 오름차순 정렬 (보석 무게)
        Arrays.sort(bagCapacity);   // 오름차순 정렬 (가방 용량)

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        long totalPrice = 0;  // 총 보석 가치
        int currentJewelIndex = 0;  // 현재 보석 인덱스

        for (int i = 0; i < k; i++) {
            int currentBagCapacity = bagCapacity[i];  // 현재 가방 최대 무게

            while (currentJewelIndex < n && jewels[currentJewelIndex].weight <= currentBagCapacity) {
                pq.offer(jewels[currentJewelIndex].price);
                currentJewelIndex++;
            }

            if (!pq.isEmpty()) {
                totalPrice += pq.poll();
            }
        }

        System.out.println(totalPrice);
    }

}
