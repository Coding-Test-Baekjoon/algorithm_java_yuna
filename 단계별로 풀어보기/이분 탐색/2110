import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int N = sc.nextInt();
        int C = sc.nextInt();
        
        int[] housesArr = new int[N];  // 집의 좌표
        for (int i = 0; i < N; i++) {
            housesArr[i] = sc.nextInt();
        }

        Arrays.sort(housesArr);  // 좌표 오름차순 정렬

        int left = 1;  // 공유기 간 최소 간격
        int right = housesArr[N - 1] - housesArr[0];  // 가장 먼 두 집 사이
        int result = 0;  // 가장 인접한 공유기 간 최대 거리

        while (left <= right) {
            int mid = (left + right) / 2;  // 공유기 간 최소 거리 후보

            // mid 거리로 공유기 C개를 설치할 수 있는지 확인
            if (canInstall(housesArr, C, mid)) {
                result = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        System.out.println(result);
    }

    // 주어진 거리로 공유기 C개를 설치할 수 있는지 확인
    private static boolean canInstall(int[] houses, int C, int minDistance) {
        int count = 1;
        int lastPosition = houses[0];  // 마지막으로 설치한 공유기 위치

        for (int i = 1; i < houses.length; i++) {
            if (houses[i] - lastPosition >= minDistance) {  // 이전 공유기와 거리 > minDistance => 설치 O
                count++;
                lastPosition = houses[i];
            }
        }

        return count >= C;
    }
}
